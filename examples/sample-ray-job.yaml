apiVersion: v1
kind: ConfigMap
metadata:
  name: ray-job-code-sample
  namespace: test-project-a
data:
  sample_code.py: "import ray\nimport os\nimport requests\n#magic___^_^___line\nray.init()\n#magic___^_^___line\n@ray.remote\nclass Counter:\n    def __init__(self):\n        # Used to verify runtimeEnv\n        self.name = os.getenv(\"counter_name\")\n        self.counter = 0\n        #magic___^_^___line\n    def inc(self):\n        self.counter += 1\n        #magic___^_^___line\n    def get_counter(self):\n        return \"{} got {}\".format(self.name, self.counter)\n        #magic___^_^___line\ncounter = Counter.remote()\n        #magic___^_^___line\nfor _ in range(5):\n    ray.get(counter.inc.remote())\n    print(ray.get(counter.get_counter.remote()))\n        #magic___^_^___line\nprint(requests.__version__)    \n"
---
apiVersion: ray.io/v1alpha1
kind: RayJob
metadata:
  name: ray-job-sample
  namespace: test-project-a
  labels:
    kueue.x-k8s.io/queue-name: local-queue-test
spec:
  suspend: true
  shutdownAfterJobFinishes: true
  entrypoint: python /home/ray/samples/sample_code.py
  runtimeEnv: ewogICAgInBpcCI6IFsKICAgICAgICAicmVxdWVzdHM9PTIuMjYuMCIsCiAgICAgICAgInBlbmR1bHVtPT0yLjEuMiIKICAgIF0sCiAgICAiZW52X3ZhcnMiOiB7ImNvdW50ZXJfbmFtZSI6ICJ0ZXN0X2NvdW50ZXIifQp9Cg==
  rayClusterSpec:
    rayVersion: '2.4.0' # should match the Ray version in the image of the containers
    # Ray head pod template
    headGroupSpec:
      # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: '1' # can be auto-completed from the limits
      #pod template
      template:
        spec:
          containers:
          - name: ray-head
            image: rayproject/ray:2.4.0
            ports:
            - containerPort: 6379
              name: gcs-server
            - containerPort: 8265 # Ray dashboard
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            resources:
              limits:
                cpu: "2"
              requests:
                cpu: "1"
            volumeMounts:
            - mountPath: /home/ray/samples
              name: code-sample
          volumes:
          # You set volumes at the Pod level, then mount them into containers inside that Pod
          - name: code-sample
            configMap:
              # Provide the name of the ConfigMap you want to mount.
              name: ray-job-code-sample
              # An array of keys from the ConfigMap to create as files
              items:
              - key: sample_code.py
                path: sample_code.py
    workerGroupSpecs:
    # the pod replicas in this group typed worker
    - replicas: 3
      minReplicas: 1
      maxReplicas: 5
      # logical group name, for this called small-group, also can be functional
      groupName: small-group
      rayStartParams: {}
      #pod template
      template:
        spec:
          containers:
          - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
            image: rayproject/ray:2.4.0
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            resources:
              limits:
                cpu: "2"
              requests:
                cpu: "1"
